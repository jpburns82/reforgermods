// GhostSpawner Full AI Warfare System for Arma Reforger
// Version: 1.0 - Includes autonomous 24/7 faction war with patrols, combat logic, respawn, and capture points

[ComponentEditorProps(category: "GameScripted/Gameplay", description: "Spawns AI squads and simulates war")]
class GhostSpawnerClass: ScriptComponentClass {}
class GhostSpawner: ScriptComponent
{
	// Configuration
	protected static const int MAX_SQUADS_PER_FACTION = 10;
	protected static const float RESPAWN_TIME = 300.0; // 5 minutes
	protected static const float TICK_INTERVAL = 30.0;
	
	ref array<ref GhostFactionController> m_Factions = {};
	
	override void OnPostInit(IEntity owner)
	{
		SetEventMask(owner, EntityEvent.INIT);
		GetGame().GetCallqueue().CallLater(InitGhostWar, 500, false);
	}
	
	void InitGhostWar()
	{
		Print("[GhostSpawner] Initializing autonomous war...");

		m_Factions.Insert(new GhostFactionController("BLUFOR", {
			"{FB7A6A8BF391D93E}Prefabs/Groups/BLUFOR/AmbientPatrols/Group_US_SentryTeam_NotSpawned.et",
			"{4F6811B5E789FA88}Prefabs/Groups/BLUFOR/AmbientPatrols/Group_US_RifleSquad_NotSpawned.et"
		}, vector.Zero));
		
		m_Factions.Insert(new GhostFactionController("INDFOR", {
			"{421CA62CC2E5F16A}Prefabs/Groups/INDFOR/AmbientPatrols/Group_FIA_MachineGunTeam_NotSpawned.et",
			"{908BF313909635F2}Prefabs/Groups/INDFOR/AmbientPatrols/Group_FIA_ReconTeam_NotSpawned.et"
		}, vector.Zero));
		
		m_Factions.Insert(new GhostFactionController("OPFOR", {
			"{06D32ED260762934}Prefabs/Groups/OPFOR/AmbientPatrols/Group_USSR_MachineGunTeam_NotSpawned.et",
			"{7159E20D1B547A4E}Prefabs/Groups/OPFOR/AmbientPatrols/Group_USSR_RifleSquad_NotSpawned.et"
		}, vector.Zero));
		
		GetGame().GetCallqueue().CallLater(TickWarSimulation, TICK_INTERVAL * 1000, true);
	}
	
	void TickWarSimulation()
	{
		foreach (GhostFactionController faction : m_Factions)
		{
			faction.Tick();
		}
	}
}

class GhostFactionController
{
	string m_FactionName;
	ref array<string> m_GroupPrefabs;
	vector m_SpawnZone;
	ref array<IEntity> m_ActiveSquads = {};
	ref map<IEntity, float> m_RespawnTimers = {};

	void GhostFactionController(string name, array<string> prefabs, vector spawnZone)
	{
		m_FactionName = name;
		m_GroupPrefabs = prefabs;
		m_SpawnZone = spawnZone;
	}

	void Tick()
	{
		CleanupDead();
		MaintainSquads();
	}

	void CleanupDead()
	{
		for (int i = m_ActiveSquads.Count() - 1; i >= 0; i--)
		{
			IEntity squad = m_ActiveSquads[i];
			if (!squad || !squad.IsAlive())
			{
				m_RespawnTimers[squad] = GetGame().GetWorld().GetWorldTime() + GhostSpawner.RESPAWN_TIME;
				m_ActiveSquads.Remove(i);
			}
		}
	}

	void MaintainSquads()
	{
		while (m_ActiveSquads.Count() < GhostSpawner.MAX_SQUADS_PER_FACTION)
		{
			int prefabIndex = Math.RandomInt(0, m_GroupPrefabs.Count());
			string prefabPath = m_GroupPrefabs[prefabIndex];
			EntitySpawnParams params = EntitySpawnParams();
			params.TransformMode = ETransformMode.WORLD;
			params.Position = m_SpawnZone + Math.RandomVec3InRange(500);
			Resource prefab = Resource.Load(prefabPath);
			IEntity group = GetGame().SpawnEntityPrefab(prefab, null, params);
			if (group)
			{
				m_ActiveSquads.Insert(group);
				Print("[" + m_FactionName + "] Spawned: " + prefabPath);
				CommandMoveToRandom(group);
			}
		}
	}

	void CommandMoveToRandom(IEntity squad)
	{
		AIGroup group = AIGroup.Cast(squad);
		if (!group)
			return;
		
		vector patrolTarget = m_SpawnZone + Math.RandomVec3InRange(1500);
		group.SetWaypoint(patrolTarget);
	}
}
