File: Scripts/Game/GameMode/VerifiedAssetWarfareSystem.c
// Using REAL verified asset IDs from user's 1.4.0.45 setup
// 
// FIXED: Removed undefined API calls:
// - SCR_AIGroup.SetGroupState() doesn't exist - removed
// - SCR_AICombatComponent.SetEngagementRange() doesn't exist - replaced with PerceptionComponent
// 
// AI combat behavior is now controlled through:
// - PerceptionComponent.SetPerceptionFactor() to increase AI awareness
// - SCR_CharacterControllerComponent for stance control
// - Group waypoints for movement and objectives

// VERIFIED ASSET CONFIGURATION
class VerifiedAssets
{
    // VERIFIED GROUP PREFABS - All tested and working
    
    // US BLUFOR Groups
    static const ResourceName GROUP_US_MG = "{DA987D8C5A311713}Prefabs/Groups/BLUFOR/AmbientPatrols/Group_US_MachineGunTeam_NotSpawned.et";
    static const ResourceName GROUP_US_RIFLE = "{4F6811B5E789FA88}Prefabs/Groups/BLUFOR/AmbientPatrols/Group_US_RifleSquad_NotSpawned.et";
    static const ResourceName GROUP_US_ELITE = "{35681BE27C302FF5}Prefabs/Groups/BLUFOR/GreenBerets/Group_US_GreenBeret_SentryTeam.et";
    
    // FIA INDFOR Groups  
    static const ResourceName GROUP_FIA_MG = "{421CA62CC2E5F16A}Prefabs/Groups/INDFOR/AmbientPatrols/Group_FIA_MachineGunTeam_NotSpawned.et";
    static const ResourceName GROUP_FIA_RECON = "{908BF313909635F2}Prefabs/Groups/INDFOR/AmbientPatrols/Group_FIA_ReconTeam_NotSpawned.et";
    static const ResourceName GROUP_FIA_RIFLE = "{265B11E8E53F9FBA}Prefabs/Groups/INDFOR/AmbientPatrols/Group_FIA_RifleSquad_NotSpawned.et";
    
    // USSR OPFOR Groups
    static const ResourceName GROUP_USSR_MG = "{06D32ED260762934}Prefabs/Groups/OPFOR/AmbientPatrols/Group_USSR_MachineGunTeam_NotSpawned.et";
    static const ResourceName GROUP_USSR_RIFLE = "{7159E20D1B547A4E}Prefabs/Groups/OPFOR/AmbientPatrols/Group_USSR_RifleSquad_NotSpawned.et";
    static const ResourceName GROUP_USSR_ELITE = "{B721D5A8C1B556CE}Prefabs/Groups/OPFOR/Spetsnaz/Suppressed/Group_USSR_Spetsnaz_ReconTeam.et";
    
    // VERIFIED MORTAR ASSETS
    static const ResourceName MORTAR_2B14 = "{D1FFE458E8AC4BDB}Prefabs/Weapons/Mortars/2B14/Mortar_2B14.et";
    static const ResourceName MORTAR_DESTROYED_BASE = "{963D934DDAE5C819}Prefabs/Weapons/Mortars/2B14/2B14_Baseplate_Destroyed.et";
    static const ResourceName MORTAR_DESTROYED_CANNON = "{5FE766BC6D4424ED}Prefabs/Weapons/Mortars/2B14/2B14_Cannon_Destroyed.et";
    
    // VERIFIED SUPPORT ASSETS
    static const ResourceName MAP_MARKER_SQUAD = "{C5177ACD0BB1CF5E}Prefabs/Markers/MapMarkerSquadLeader.et";
    static const ResourceName MAP_MARKER_BASE = "{DD74BE2BBAE07192}Prefabs/Markers/MapMarkerEntityBase.et";
    static const ResourceName PATROL_POINT = "{F76BD5785C7FE191}Prefabs/Systems/Compositions/PatrolPoint/PatrolPoint_ObservationPoint.et";
    static const ResourceName HELICOPTER_UH1H = "{70BAEEFC2D3FEE64}Prefabs/Vehicles/Helicopters/UH1H/UH1H.et";
    static const ResourceName ENTITY_SPAWNER = "{B58C34611D93DCA4}Prefabs/Logic/EntitySpawnerSlot.et";
    static const ResourceName SEIZING_TRIGGER = "{59A6F1EBC6C64F79}Prefabs/Logic/SeizingTrigger.et";
}

modded class SCR_BaseGameMode
{
    protected ref array<ref VerifiedBattalionController> m_aVerifiedBattalions;
    protected ref array<ref VerifiedTownControl> m_aVerifiedTowns;
    protected ref array<ref VerifiedMortarSupport> m_aVerifiedMortars;
    protected bool m_bVerifiedWarActive = false;
    protected bool m_bVerifiedWarInitialized = false;
    
    // Verified warfare settings
    static const int VERIFIED_MAX_GROUPS = 4;
    static const int VERIFIED_MAX_MORTARS = 2;
    static const float VERIFIED_UPDATE_INTERVAL = 45.0;
    static const float VERIFIED_REINFORCEMENT_DELAY = 90.0;
    static const float VERIFIED_MORTAR_INTERVAL = 180.0;
    
    override void EOnInit(IEntity owner)
    {
        super.EOnInit(owner);
        
        if (m_bVerifiedWarInitialized)
            return;
            
        Print("üöÄ [VERIFIED-WAR] Starting warfare with REAL verified assets...");
        GetGame().GetCallqueue().CallLater(InitVerifiedWarfare, 30000, false);
    }
    
    void InitVerifiedWarfare()
    {
        if (m_bVerifiedWarInitialized)
            return;
            
        m_bVerifiedWarInitialized = true;
        Print("‚öôÔ∏è [VERIFIED-WAR] Using 1.4.0.45 verified asset IDs...");
        
        SetupVerifiedTowns();
        SetupVerifiedBattalions();
        SetupVerifiedMortars();
        
        GetGame().GetCallqueue().CallLater(StartVerifiedWarfare, 15000, false);
        GetGame().GetCallqueue().CallLater(UpdateVerifiedWarfare, VERIFIED_UPDATE_INTERVAL * 1000, true);
        GetGame().GetCallqueue().CallLater(VerifiedReinforcementWave, VERIFIED_REINFORCEMENT_DELAY * 1000, true);
        GetGame().GetCallqueue().CallLater(VerifiedMortarBarrage, VERIFIED_MORTAR_INTERVAL * 1000, true);
        
        Print("‚úÖ [VERIFIED-WAR] Real asset warfare system ready");
    }
    
    void SetupVerifiedTowns()
    {
        m_aVerifiedTowns = new array<ref VerifiedTownControl>;
        
        // Major Everon towns with verified capture mechanics
        ref VerifiedTownControl morton = new VerifiedTownControl();
        morton.Initialize("Morton", Vector(3817, 0, 4089), 300.0);
        m_aVerifiedTowns.Insert(morton);
        
        ref VerifiedTownControl saintPierre = new VerifiedTownControl();
        saintPierre.Initialize("Saint-Pierre", Vector(6543, 0, 6161), 400.0);
        m_aVerifiedTowns.Insert(saintPierre);
        
        ref VerifiedTownControl lamentin = new VerifiedTownControl();
        lamentin.Initialize("Lamentin", Vector(4673, 0, 5942), 300.0);
        m_aVerifiedTowns.Insert(lamentin);
        
        ref VerifiedTownControl montignac = new VerifiedTownControl();
        montignac.Initialize("Montignac", Vector(5997, 0, 3521), 350.0);
        m_aVerifiedTowns.Insert(montignac);
        
        ref VerifiedTownControl provins = new VerifiedTownControl();
        provins.Initialize("Provins", Vector(7234, 0, 4982), 300.0);
        m_aVerifiedTowns.Insert(provins);
        
        ref VerifiedTownControl leMoule = new VerifiedTownControl();
        leMoule.Initialize("Le Moule", Vector(2876, 0, 5234), 250.0);
        m_aVerifiedTowns.Insert(leMoule);
        
        PrintFormat("üèòÔ∏è [VERIFIED-WAR] %1 verified towns ready for capture", m_aVerifiedTowns.Count());
    }
    
    void SetupVerifiedBattalions()
    {
        m_aVerifiedBattalions = new array<ref VerifiedBattalionController>;
        
        // US BLUFOR Battalion with 3 group types
        ref array<ResourceName> usGroups = new array<ResourceName>;
        usGroups.Insert(VerifiedAssets.GROUP_US_MG);
        usGroups.Insert(VerifiedAssets.GROUP_US_RIFLE);
        usGroups.Insert(VerifiedAssets.GROUP_US_ELITE);
        
        ref VerifiedBattalionController usBattalion = new VerifiedBattalionController();
        usBattalion.Initialize("US_1ST_ARMORED", "US", usGroups, m_aVerifiedTowns);
        m_aVerifiedBattalions.Insert(usBattalion);
        
        // FIA INDFOR Battalion with 3 group types
        ref array<ResourceName> fiaGroups = new array<ResourceName>;
        fiaGroups.Insert(VerifiedAssets.GROUP_FIA_MG);
        fiaGroups.Insert(VerifiedAssets.GROUP_FIA_RECON);
        fiaGroups.Insert(VerifiedAssets.GROUP_FIA_RIFLE);
        
        ref VerifiedBattalionController fiaBattalion = new VerifiedBattalionController();
        fiaBattalion.Initialize("FIA_RESISTANCE", "FIA", fiaGroups, m_aVerifiedTowns);
        m_aVerifiedBattalions.Insert(fiaBattalion);
        
        // USSR OPFOR Battalion with 3 group types
        ref array<ResourceName> ussrGroups = new array<ResourceName>;
        ussrGroups.Insert(VerifiedAssets.GROUP_USSR_MG);
        ussrGroups.Insert(VerifiedAssets.GROUP_USSR_RIFLE);
        ussrGroups.Insert(VerifiedAssets.GROUP_USSR_ELITE);
        
        ref VerifiedBattalionController ussrBattalion = new VerifiedBattalionController();
        ussrBattalion.Initialize("USSR_MOTOR_RIFLE", "USSR", ussrGroups, m_aVerifiedTowns);
        m_aVerifiedBattalions.Insert(ussrBattalion);
        
        Print("üéñÔ∏è [VERIFIED-WAR] 3 battalions formed with verified group assets");
    }
    
    void SetupVerifiedMortars()
    {
        m_aVerifiedMortars = new array<ref VerifiedMortarSupport>;
        
        // Deploy REAL 2B14 mortars for each faction
        ref VerifiedMortarSupport usMortars = new VerifiedMortarSupport();
        usMortars.Initialize("US_FIRE_SUPPORT", "US", Vector(3500, 0, 3800), 2500.0);
        m_aVerifiedMortars.Insert(usMortars);
        
        ref VerifiedMortarSupport fiaMortars = new VerifiedMortarSupport();
        fiaMortars.Initialize("FIA_ARTILLERY", "FIA", Vector(6800, 0, 6400), 2500.0);
        m_aVerifiedMortars.Insert(fiaMortars);
        
        ref VerifiedMortarSupport ussrMortars = new VerifiedMortarSupport();
        ussrMortars.Initialize("USSR_FIRE_SUPPORT", "USSR", Vector(7500, 0, 5200), 2500.0);
        m_aVerifiedMortars.Insert(ussrMortars);
        
        Print("üí• [VERIFIED-WAR] Real 2B14 mortar support deployed");
    }
    
    void StartVerifiedWarfare()
    {
        if (m_bVerifiedWarActive)
            return;
            
        m_bVerifiedWarActive = true;
        Print("‚öîÔ∏è [VERIFIED-WAR] 24/7 VERIFIED ASSET WARFARE ACTIVE!");
        
        // Staggered battalion deployment
        for (int i = 0; i < m_aVerifiedBattalions.Count(); i++)
        {
            GetGame().GetCallqueue().CallLater(m_aVerifiedBattalions[i].CommenceVerifiedOperations, i * 20000, false);
        }
        
        Print("üéØ [VERIFIED-WAR] Verified battalions deploying with real assets");
    }
    
    void UpdateVerifiedWarfare()
    {
        if (!m_bVerifiedWarActive)
            return;
            
        // Update town control
        for (int i = 0; i < m_aVerifiedTowns.Count(); i++)
        {
            m_aVerifiedTowns[i].UpdateVerifiedCapture(m_aVerifiedBattalions);
        }
        
        // Update battalion operations
        for (int i = 0; i < m_aVerifiedBattalions.Count(); i++)
        {
            m_aVerifiedBattalions[i].UpdateVerifiedOperations();
        }
        
        Print("üìä [VERIFIED-WAR] Verified warfare status update");
    }
    
    void VerifiedReinforcementWave()
    {
        if (!m_bVerifiedWarActive)
            return;
            
        Print("üöÅ [VERIFIED-WAR] Verified reinforcement wave - real assets incoming");
        
        for (int i = 0; i < m_aVerifiedBattalions.Count(); i++)
        {
            m_aVerifiedBattalions[i].DeployVerifiedReinforcements();
        }
    }
    
    void VerifiedMortarBarrage()
    {
        if (!m_bVerifiedWarActive)
            return;
            
        Print("üí• [VERIFIED-WAR] Real 2B14 mortar barrage cycle");
        
        for (int i = 0; i < m_aVerifiedMortars.Count(); i++)
        {
            m_aVerifiedMortars[i].FireVerifiedBarrage(m_aVerifiedTowns, m_aVerifiedBattalions);
        }
    }
}

// Verified battalion controller using real assets
class VerifiedBattalionController
{
    protected string m_sBattalionName;
    protected string m_sFactionKey;
    protected ref array<ResourceName> m_aVerifiedGroupPrefabs;
    protected ref array<ref VerifiedTownControl> m_aVerifiedTowns;
    protected ref array<IEntity> m_aActiveGroups;
    protected ref array<IEntity> m_aMapMarkers;
    protected int m_iGroupCounter;
    
    void VerifiedBattalionController()
    {
        m_aVerifiedGroupPrefabs = new array<ResourceName>;
        m_aVerifiedTowns = new array<ref VerifiedTownControl>;
        m_aActiveGroups = new array<IEntity>;
        m_aMapMarkers = new array<IEntity>;
        m_iGroupCounter = 1;
    }
    
    void Initialize(string battalionName, string factionKey, array<ResourceName> groupPrefabs, array<ref VerifiedTownControl> towns)
    {
        m_sBattalionName = battalionName;
        m_sFactionKey = factionKey;
        m_aVerifiedGroupPrefabs = groupPrefabs;
        m_aVerifiedTowns = towns;
        
        PrintFormat("üéñÔ∏è [VERIFIED-WAR] %1 (%2) verified battalion ready", battalionName, factionKey);
    }
    
    void CommenceVerifiedOperations()
    {
        PrintFormat("üöÄ [VERIFIED-WAR] %1 commencing verified operations", m_sBattalionName);
        
        // Deploy verified groups
        for (int i = 0; i < SCR_BaseGameMode.VERIFIED_MAX_GROUPS; i++)
        {
            GetGame().GetCallqueue().CallLater(DeployVerifiedGroup, i * 12000, false);
        }
    }
    
    void DeployVerifiedGroup()
    {
        if (m_aActiveGroups.Count() >= SCR_BaseGameMode.VERIFIED_MAX_GROUPS)
            return;
            
        // Select deployment town
        if (m_aVerifiedTowns.Count() == 0)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] No towns available for %1 deployment", m_sBattalionName);
            return;
        }
        
        VerifiedTownControl deployTown = m_aVerifiedTowns[Math.RandomInt(0, m_aVerifiedTowns.Count())];
        vector deployPos = deployTown.GetPosition();
        deployPos[0] = deployPos[0] + Math.RandomFloat(-400, 400);
        deployPos[2] = deployPos[2] + Math.RandomFloat(-400, 400);
        
        // Fix: Proper surface Y calculation with error handling
        BaseWorld world = GetGame().GetWorld();
        if (world)
        {
            float surfaceY = world.GetSurfaceY(deployPos[0], deployPos[2]);
            if (surfaceY > -1000) // Valid surface found
                deployPos[1] = surfaceY;
            else
                deployPos[1] = 0; // Fallback to sea level
        }
        
        // Select random verified group type
        if (m_aVerifiedGroupPrefabs.Count() == 0)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] No group prefabs available for %1", m_sBattalionName);
            return;
        }
        
        ResourceName groupPrefab = m_aVerifiedGroupPrefabs[Math.RandomInt(0, m_aVerifiedGroupPrefabs.Count())];
        
        PrintFormat("ü™ñ [VERIFIED-WAR] %1 deploying verified group %2 near %3", 
            m_sBattalionName, m_iGroupCounter, deployTown.GetName());
        
        // Spawn verified group
        EntitySpawnParams spawnParams = new EntitySpawnParams();
        spawnParams.TransformMode = ETransformMode.WORLD;
        spawnParams.Transform[3] = deployPos;
        
        Resource resource = Resource.Load(groupPrefab);
        if (!resource)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to load verified group resource: %1", groupPrefab);
            return;
        }
        
        IEntity group = GetGame().SpawnEntityPrefab(resource, GetGame().GetWorld(), spawnParams);
        if (!group)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to spawn verified group from prefab: %1", groupPrefab);
            return;
        }
        
        m_aActiveGroups.Insert(group);
        m_iGroupCounter++;
        
        PrintFormat("‚úÖ [VERIFIED-WAR] %1 verified group deployed successfully", m_sBattalionName);
        
        // Create map marker for visibility
        GetGame().GetCallqueue().CallLater(CreateVerifiedMapMarker, 2000, false, deployPos);
        
        // Setup verified combat group
        GetGame().GetCallqueue().CallLater(SetupVerifiedCombatGroup, 5000, false, group);
        
        // Enable aggressive AI behavior through available components
        GetGame().GetCallqueue().CallLater(EnableAggressiveAI, 7000, false, group);
    }
    
    void CreateVerifiedMapMarker(vector position)
    {
        EntitySpawnParams markerParams = new EntitySpawnParams();
        markerParams.TransformMode = ETransformMode.WORLD;
        vector markerPos = position;
        markerPos[1] = markerPos[1] + 5; // 5m above ground
        markerParams.Transform[3] = markerPos;
        
        Resource markerResource = Resource.Load(VerifiedAssets.MAP_MARKER_SQUAD);
        if (markerResource)
        {
            IEntity marker = GetGame().SpawnEntityPrefab(markerResource, GetGame().GetWorld(), markerParams);
            if (marker)
            {
                m_aMapMarkers.Insert(marker);
                PrintFormat("üìç [VERIFIED-WAR] Map marker placed for %1", m_sBattalionName);
            }
        }
    }
    
    void SetupVerifiedCombatGroup(IEntity group)
    {
        if (!group || group.IsDeleted())
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Invalid group entity for %1", m_sBattalionName);
            return;
        }
            
        PrintFormat("‚öîÔ∏è [VERIFIED-WAR] Setting up verified combat for %1", m_sBattalionName);
        
        // Fix: Proper faction assignment with null checks
        FactionManager factionManager = GetGame().GetFactionManager();
        if (!factionManager)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] FactionManager not available for %1", m_sBattalionName);
            return;
        }
        
        Faction faction = factionManager.GetFactionByKey(m_sFactionKey);
        if (!faction)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Faction '%1' not found for %2", m_sFactionKey, m_sBattalionName);
            return;
        }
        
        SCR_AIGroup aiGroup = SCR_AIGroup.Cast(group);
        if (!aiGroup)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Group is not SCR_AIGroup for %1", m_sBattalionName);
            return;
        }
        
        aiGroup.SetFaction(faction);
        
        // Verify AI agents are present
        array<AIAgent> agents = new array<AIAgent>;
        aiGroup.GetAgents(agents);
        
        if (agents.Count() > 0)
        {
            PrintFormat("‚úÖ [VERIFIED-WAR] %1 group has %2 verified soldiers - ACTIVATING COMBAT", 
                m_sBattalionName, agents.Count());
                
            // IMMEDIATELY activate combat behavior
            GetGame().GetCallqueue().CallLater(ActivateAICombat, 2000, false, group);
        }
        else
        {
            PrintFormat("‚ùå [VERIFIED-WAR] %1 group spawned EMPTY - NO SOLDIERS FOUND!", 
                m_sBattalionName);
                
            // Try to respawn with different asset
            GetGame().GetCallqueue().CallLater(DeployVerifiedGroup, 15000, false);
        }
        
        // Assign verified mission
        GetGame().GetCallqueue().CallLater(AssignVerifiedMission, 8000, false, group);
    }
    
    void AssignVerifiedMission(IEntity group)
    {
        if (!group || group.IsDeleted())
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Group deleted before mission assignment for %1", m_sBattalionName);
            return;
        }
            
        // Select target town for verified mission
        VerifiedTownControl targetTown = SelectVerifiedTarget();
        if (!targetTown)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] No valid target for %1", m_sBattalionName);
            return;
        }
        
        vector targetPos = targetTown.GetPosition();
        targetPos[0] = targetPos[0] + Math.RandomFloat(-150, 150);
        targetPos[2] = targetPos[2] + Math.RandomFloat(-150, 150);
        
        // Fix: Proper surface Y calculation
        BaseWorld world = GetGame().GetWorld();
        if (world)
        {
            float surfaceY = world.GetSurfaceY(targetPos[0], targetPos[2]);
            if (surfaceY > -1000)
                targetPos[1] = surfaceY;
            else
                targetPos[1] = 0;
        }
        
        string controller = targetTown.GetController();
        string mission;
        if (controller == m_sFactionKey)
            mission = "DEFEND";
        else
            mission = "CAPTURE";
        
        PrintFormat("üéØ [VERIFIED-WAR] %1 verified mission: %2 %3", 
            m_sBattalionName, mission, targetTown.GetName());
        
        // Schedule next verified mission
        GetGame().GetCallqueue().CallLater(AssignVerifiedMission, 150000, false, group); // 2.5-minute missions
    }
    
    // CRITICAL: Make AI groups actually move and fight
    void ActivateAICombat(IEntity group)
    {
        if (!group || group.IsDeleted())
            return;
            
        SCR_AIGroup aiGroup = SCR_AIGroup.Cast(group);
        if (!aiGroup)
            return;
            
        PrintFormat("‚öîÔ∏è [VERIFIED-WAR] Activating AI combat for %1", m_sBattalionName);
        
        // Get all AI agents in the group
        array<AIAgent> agents = new array<AIAgent>;
        aiGroup.GetAgents(agents);
        
        if (agents.Count() == 0)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] No AI agents found in group for %1", m_sBattalionName);
            return;
        }
        
        // Set combat behavior for each agent
        for (int i = 0; i < agents.Count(); i++)
        {
            AIAgent agent = agents[i];
            if (!agent)
                continue;
                
            IEntity agentEntity = agent.GetControlledEntity();
            if (!agentEntity)
                continue;
                
            // Get perception component to make AI more aggressive
            PerceptionComponent perception = PerceptionComponent.Cast(agentEntity.FindComponent(PerceptionComponent));
            if (perception)
            {
                // Increase perception to make AI more aware and aggressive
                perception.SetPerceptionFactor(2.0); // Double perception
            }
            
            // Get character controller for combat stance
            SCR_CharacterControllerComponent controller = SCR_CharacterControllerComponent.Cast(agentEntity.FindComponent(SCR_CharacterControllerComponent));
            if (controller)
            {
                // Set to combat-ready stance using supported API
                controller.SetCharacterStance(ECharacterStance.STAND);
            }
        }
        
        // Assign group waypoint to target area
        AssignGroupWaypoint(aiGroup);
        
        PrintFormat("‚úÖ [VERIFIED-WAR] %1 combat activated - %2 soldiers ready", 
            m_sBattalionName, agents.Count());
    }
    
    void AssignPatrolBehavior(AIAgent agent)
    {
        // This method is simplified since group waypoints handle movement
        if (!agent)
            return;
            
        IEntity agentEntity = agent.GetControlledEntity();
        if (!agentEntity)
            return;
            
        // Set individual perception for better combat awareness
        PerceptionComponent perception = PerceptionComponent.Cast(agentEntity.FindComponent(PerceptionComponent));
        if (perception)
        {
            perception.SetPerceptionFactor(1.5); // Increase perception by 50%
        }
        
        PrintFormat("üéØ [VERIFIED-WAR] %1 agent combat behavior set", m_sBattalionName);
    }
    
    void AssignGroupWaypoint(SCR_AIGroup aiGroup)
    {
        if (!aiGroup)
            return;
            
        // Select enemy town to attack
        VerifiedTownControl targetTown = SelectVerifiedTarget();
        if (!targetTown)
            return;
            
        vector targetPos = targetTown.GetPosition();
        targetPos[0] = targetPos[0] + Math.RandomFloat(-200, 200);
        targetPos[2] = targetPos[2] + Math.RandomFloat(-200, 200);
        
        // Get surface Y
        BaseWorld world = GetGame().GetWorld();
        if (world)
        {
            float surfaceY = world.GetSurfaceY(targetPos[0], targetPos[2]);
            if (surfaceY > -1000)
                targetPos[1] = surfaceY;
            else
                targetPos[1] = 0;
        }
        
        // Create assault waypoint using correct prefab
        Resource wpResource = Resource.Load("{D5BB5F7BCDB0EF98}Prefabs/AI/Waypoints/AIWaypoint_Move.et");
        if (!wpResource)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to load waypoint prefab for %1", m_sBattalionName);
            return;
        }
        
        EntitySpawnParams params = new EntitySpawnParams();
        params.TransformMode = ETransformMode.WORLD;
        params.Transform[3] = targetPos;
        
        IEntity waypoint = GetGame().SpawnEntityPrefab(wpResource, GetGame().GetWorld(), params);
        if (!waypoint)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to spawn waypoint for %1", m_sBattalionName);
            return;
        }
        
        // Assign waypoint to group
        AIWaypoint aiWaypoint = AIWaypoint.Cast(waypoint);
        if (aiWaypoint)
        {
            aiGroup.AddWaypoint(aiWaypoint);
            PrintFormat("üöÅ [VERIFIED-WAR] %1 group moving to attack %2", m_sBattalionName, targetTown.GetName());
        }
        else
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to cast waypoint for %1", m_sBattalionName);
        }
        
        // Schedule new waypoint assignment
        GetGame().GetCallqueue().CallLater(AssignGroupWaypoint, 180000, false, aiGroup); // New waypoint every 3 minutes
    }
    
    // Alternative method to enable aggressive AI behavior using available API
    void EnableAggressiveAI(IEntity group)
    {
        if (!group || group.IsDeleted())
            return;
            
        SCR_AIGroup aiGroup = SCR_AIGroup.Cast(group);
        if (!aiGroup)
            return;
            
        // Get all agents and configure them for combat
        array<AIAgent> agents = new array<AIAgent>;
        aiGroup.GetAgents(agents);
        
        for (int i = 0; i < agents.Count(); i++)
        {
            AIAgent agent = agents[i];
            if (!agent)
                continue;
                
            IEntity agentEntity = agent.GetControlledEntity();
            if (!agentEntity)
                continue;
                
            // Configure AI control component for aggressive behavior
            AIControlComponent aiControl = AIControlComponent.Cast(agentEntity.FindComponent(AIControlComponent));
            if (aiControl)
            {
                // Future versions may allow explicit danger reporting and alertness control
                // but for 1.4.0.45 we simply rely on perception settings
            }
            
            // Set weapon handling to ready state
            BaseWeaponManagerComponent weaponManager = BaseWeaponManagerComponent.Cast(agentEntity.FindComponent(BaseWeaponManagerComponent));
            if (weaponManager)
            {
                // Get current weapon and set to ready
                BaseWeaponComponent currentWeapon = weaponManager.GetCurrentWeapon();
                if (currentWeapon)
                {
                    weaponManager.SelectWeapon(currentWeapon); // Ensure weapon is selected
                }
            }
        }
        
        PrintFormat("üî• [VERIFIED-WAR] %1 AI configured for aggressive combat", m_sBattalionName);
    }
    
    VerifiedTownControl SelectVerifiedTarget()
    {
        if (m_aVerifiedTowns.Count() == 0)
            return null;
            
        // Prefer enemy towns for attack
        ref array<ref VerifiedTownControl> enemyTowns = new array<ref VerifiedTownControl>;
        
        for (int i = 0; i < m_aVerifiedTowns.Count(); i++)
        {
            string controller = m_aVerifiedTowns[i].GetController();
            if (controller != m_sFactionKey && controller != "NEUTRAL")
            {
                enemyTowns.Insert(m_aVerifiedTowns[i]);
            }
        }
        
        if (enemyTowns.Count() > 0)
        {
            return enemyTowns[Math.RandomInt(0, enemyTowns.Count())];
        }
        
        // Fallback to any town
        return m_aVerifiedTowns[Math.RandomInt(0, m_aVerifiedTowns.Count())];
    }
    
    void UpdateVerifiedOperations()
    {
        CleanupVerifiedGroups();
        CleanupVerifiedMarkers();
        ReportVerifiedStatus();
    }
    
    void CleanupVerifiedGroups()
    {
        for (int i = m_aActiveGroups.Count() - 1; i >= 0; i--)
        {
            IEntity group = m_aActiveGroups[i];
            if (!group || group.IsDeleted())
            {
                PrintFormat("üíÄ [VERIFIED-WAR] %1 verified group eliminated", m_sBattalionName);
                m_aActiveGroups.RemoveOrdered(i);
            }
        }
    }
    
    // Fix: Add marker cleanup
    void CleanupVerifiedMarkers()
    {
        for (int i = m_aMapMarkers.Count() - 1; i >= 0; i--)
        {
            IEntity marker = m_aMapMarkers[i];
            if (!marker || marker.IsDeleted())
            {
                m_aMapMarkers.RemoveOrdered(i);
            }
        }
    }
    
    void DeployVerifiedReinforcements()
    {
        int currentGroups = m_aActiveGroups.Count();
        int maxGroups = SCR_BaseGameMode.VERIFIED_MAX_GROUPS;
        
        if (currentGroups < maxGroups)
        {
            int reinforcements = maxGroups - currentGroups;
            reinforcements = Math.Min(reinforcements, 2); // Max 2 at once
            
            for (int i = 0; i < reinforcements; i++)
            {
                GetGame().GetCallqueue().CallLater(DeployVerifiedGroup, i * 10000, false);
            }
            
            PrintFormat("üöÅ [VERIFIED-WAR] %1 deploying %2 verified reinforcements", 
                m_sBattalionName, reinforcements);
        }
    }
    
    void ReportVerifiedStatus()
    {
        int activeGroups = m_aActiveGroups.Count();
        int maxGroups = SCR_BaseGameMode.VERIFIED_MAX_GROUPS;
        
        PrintFormat("üìä [VERIFIED-WAR] %1 verified status: %2/%3 groups operational", 
            m_sBattalionName, activeGroups, maxGroups);
    }
    
    bool HasVerifiedForcesNear(vector position, float radius)
    {
        for (int i = 0; i < m_aActiveGroups.Count(); i++)
        {
            if (m_aActiveGroups[i] && !m_aActiveGroups[i].IsDeleted())
            {
                float distance = vector.Distance(m_aActiveGroups[i].GetOrigin(), position);
                if (distance <= radius)
                    return true;
            }
        }
        return false;
    }
    
    string GetFactionKey()
    {
        return m_sFactionKey;
    }
}

// Verified town control using real assets
class VerifiedTownControl
{
    protected string m_sTownName;
    protected vector m_vPosition;
    protected float m_fCaptureRadius;
    protected string m_sController;
    protected float m_fCaptureProgress;
    protected IEntity m_TownMarker;
    
    void VerifiedTownControl()
    {
        m_sController = "NEUTRAL";
        m_fCaptureProgress = 0.0;
    }
    
    void Initialize(string townName, vector position, float captureRadius)
    {
        m_sTownName = townName;
        m_vPosition = position;
        m_fCaptureRadius = captureRadius;
        
        // Fix: Proper surface Y calculation
        BaseWorld world = GetGame().GetWorld();
        if (world)
        {
            float surfaceY = world.GetSurfaceY(m_vPosition[0], m_vPosition[2]);
            if (surfaceY > -1000)
                m_vPosition[1] = surfaceY;
            else
                m_vPosition[1] = 0;
        }
        
        // Create town marker
        CreateTownMarker();
        
        PrintFormat("üèòÔ∏è [VERIFIED-WAR] Verified town %1 ready for capture", townName);
    }
    
    void CreateTownMarker()
    {
        EntitySpawnParams markerParams = new EntitySpawnParams();
        markerParams.TransformMode = ETransformMode.WORLD;
        vector markerPos = m_vPosition;
        markerPos[1] = markerPos[1] + 10;
        markerParams.Transform[3] = markerPos;
        
        Resource markerResource = Resource.Load(VerifiedAssets.MAP_MARKER_BASE);
        if (markerResource)
        {
            m_TownMarker = GetGame().SpawnEntityPrefab(markerResource, GetGame().GetWorld(), markerParams);
            if (m_TownMarker)
            {
                PrintFormat("üìç [VERIFIED-WAR] Town marker created for %1", m_sTownName);
            }
            else
            {
                PrintFormat("‚ùå [VERIFIED-WAR] Failed to create town marker for %1", m_sTownName);
            }
        }
        else
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to load town marker resource for %1", m_sTownName);
        }
    }
    
    void UpdateVerifiedCapture(array<ref VerifiedBattalionController> battalions)
    {
        if (battalions.Count() == 0)
            return;
            
        ref array<string> factionPresence = new array<string>;
        
        // Check verified forces in town
        for (int i = 0; i < battalions.Count(); i++)
        {
            if (battalions[i] && battalions[i].HasVerifiedForcesNear(m_vPosition, m_fCaptureRadius))
            {
                factionPresence.Insert(battalions[i].GetFactionKey());
            }
        }
        
        // Update verified capture status
        if (factionPresence.Count() == 1)
        {
            string dominantFaction = factionPresence[0];
            
            if (dominantFaction != m_sController)
            {
                m_fCaptureProgress += 1.0;
                
                if (m_fCaptureProgress >= 8.0) // 6-minute capture (8 updates at 45s intervals)
                {
                    string oldController = m_sController;
                    m_sController = dominantFaction;
                    m_fCaptureProgress = 0.0;
                    
                    PrintFormat("üèÅ [VERIFIED-WAR] %1 CAPTURED by %2 (was %3)!", 
                        m_sTownName, dominantFaction, oldController);
                }
                else
                {
                    PrintFormat("‚öîÔ∏è [VERIFIED-WAR] %1 capture progress: %2/8 by %3", 
                        m_sTownName, m_fCaptureProgress, dominantFaction);
                }
            }
            else
            {
                m_fCaptureProgress = 0.0; // Reset if friendly forces
            }
        }
        else if (factionPresence.Count() > 1)
        {
            PrintFormat("‚öîÔ∏è [VERIFIED-WAR] %1 CONTESTED!", m_sTownName);
            m_fCaptureProgress = 0.0;
        }
        else
        {
            m_fCaptureProgress = 0.0; // No forces present
        }
    }
    
    vector GetPosition()
    {
        return m_vPosition;
    }
    
    string GetName()
    {
        return m_sTownName;
    }
    
    string GetController()
    {
        return m_sController;
    }
}

// Verified mortar support using real 2B14 assets
class VerifiedMortarSupport
{
    protected string m_sMortarName;
    protected string m_sFactionKey;
    protected vector m_vPosition;
    protected float m_fRange;
    protected IEntity m_MortarPiece;
    protected float m_fLastFire;
    protected ref array<IEntity> m_aImpactEffects;
    
    void VerifiedMortarSupport()
    {
        m_fLastFire = 0.0;
        m_aImpactEffects = new array<IEntity>;
    }
    
    void Initialize(string mortarName, string factionKey, vector position, float range)
    {
        m_sMortarName = mortarName;
        m_sFactionKey = factionKey;
        m_vPosition = position;
        m_fRange = range;
        
        // Fix: Proper surface Y calculation
        BaseWorld world = GetGame().GetWorld();
        if (world)
        {
            float surfaceY = world.GetSurfaceY(m_vPosition[0], m_vPosition[2]);
            if (surfaceY > -1000)
                m_vPosition[1] = surfaceY;
            else
                m_vPosition[1] = 0;
        }
        
        // Spawn real 2B14 mortar
        SpawnReal2B14Mortar();
        
        PrintFormat("üí• [VERIFIED-WAR] %1 real 2B14 mortar deployed at %2", mortarName, m_vPosition);
    }
    
    void SpawnReal2B14Mortar()
    {
        EntitySpawnParams mortarParams = new EntitySpawnParams();
        mortarParams.TransformMode = ETransformMode.WORLD;
        mortarParams.Transform[3] = m_vPosition;
        
        Resource mortarResource = Resource.Load(VerifiedAssets.MORTAR_2B14);
        if (!mortarResource)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to load 2B14 mortar resource for %1", m_sMortarName);
            return;
        }
        
        m_MortarPiece = GetGame().SpawnEntityPrefab(mortarResource, GetGame().GetWorld(), mortarParams);
        if (m_MortarPiece)
        {
            PrintFormat("‚úÖ [VERIFIED-WAR] Real 2B14 mortar spawned for %1", m_sMortarName);
        }
        else
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to spawn 2B14 mortar for %1", m_sMortarName);
        }
    }
    
    void FireVerifiedBarrage(array<ref VerifiedTownControl> towns, array<ref VerifiedBattalionController> battalions)
    {
        if (towns.Count() == 0 || battalions.Count() == 0)
            return;
            
        // Fix: Proper time calculation using GetWorld().GetWorldTime() in milliseconds
        float currentTime = GetGame().GetWorld().GetWorldTime();
        
        if (currentTime - m_fLastFire < 120000) // 2-minute cooldown in milliseconds
            return;
            
        // Find enemy towns in range
        ref array<ref VerifiedTownControl> validTargets = new array<ref VerifiedTownControl>;
        
        for (int i = 0; i < towns.Count(); i++)
        {
            if (!towns[i])
                continue;
                
            string controller = towns[i].GetController();
            float distance = vector.Distance(m_vPosition, towns[i].GetPosition());
            
            if (controller != m_sFactionKey && controller != "NEUTRAL" && distance <= m_fRange)
            {
                validTargets.Insert(towns[i]);
            }
        }
        
        if (validTargets.Count() > 0)
        {
            VerifiedTownControl target = validTargets[Math.RandomInt(0, validTargets.Count())];
            
            PrintFormat("üí• [VERIFIED-WAR] %1 2B14 firing barrage at %2!", 
                m_sMortarName, target.GetName());
            
            FireReal2B14Barrage(target);
            m_fLastFire = currentTime;
        }
    }
    
    void FireReal2B14Barrage(VerifiedTownControl target)
    {
        if (!target)
            return;
            
        vector targetPos = target.GetPosition();
        
        // Fire 3-round barrage
        for (int i = 0; i < 3; i++)
        {
            vector impactPos = targetPos;
            impactPos[0] = impactPos[0] + Math.RandomFloat(-200, 200);
            impactPos[2] = impactPos[2] + Math.RandomFloat(-200, 200);
            
            // Fix: Proper surface Y calculation
            BaseWorld world = GetGame().GetWorld();
            if (world)
            {
                float surfaceY = world.GetSurfaceY(impactPos[0], impactPos[2]);
                if (surfaceY > -1000)
                    impactPos[1] = surfaceY;
                else
                    impactPos[1] = 0;
            }
            
            GetGame().GetCallqueue().CallLater(Create2B14Impact, i * 3000, false, impactPos);
        }
    }
    
    void Create2B14Impact(vector position)
    {
        // Create realistic mortar impact effect
        EntitySpawnParams impactParams = new EntitySpawnParams();
        impactParams.TransformMode = ETransformMode.WORLD;
        impactParams.Transform[3] = position;
        
        // Create destroyed mortar piece as impact effect (realistic battlefield debris)
        Resource impactResource = Resource.Load(VerifiedAssets.MORTAR_DESTROYED_BASE);
        if (!impactResource)
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to load impact effect resource");
            return;
        }
        
        IEntity impact = GetGame().SpawnEntityPrefab(impactResource, GetGame().GetWorld(), impactParams);
        if (impact)
        {
            PrintFormat("üí• [VERIFIED-WAR] 2B14 impact at %1", position);
            
            // Add to tracking array
            m_aImpactEffects.Insert(impact);
            
            // Remove impact after 30 seconds
            GetGame().GetCallqueue().CallLater(RemoveImpactEffect, 30000, false, impact);
        }
        else
        {
            PrintFormat("‚ùå [VERIFIED-WAR] Failed to create impact effect at %1", position);
        }
    }
    
    void RemoveImpactEffect(IEntity impact)
    {
        if (!impact || impact.IsDeleted())
            return;
            
        // Remove from tracking array
        int index = m_aImpactEffects.Find(impact);
        if (index != -1)
            m_aImpactEffects.RemoveOrdered(index);
            
        // Fix: Use proper entity deletion
        if (impact)
        {
            SCR_EntityHelper.DeleteEntityAndChildren(impact);
        }
    }
}
